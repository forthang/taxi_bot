import os
import json
import aiohttp
import asyncio
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

class DeepSeekProcessor:
    def __init__(self):
        self.api_key = "sk-a8087b9cb466425cb27016f8dc0b0794"
        self.api_url = "https://api.deepseek.com/v1/chat/completions"
        
    async def process_taxi_message(self, message_text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫—Å–∏ —á–µ—Ä–µ–∑ DeepSeek API"""
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ —Ç–∞–∫—Å–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        
        –°–æ–æ–±—â–µ–Ω–∏–µ:
        {message_text}
        
        –ò–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "route": "–º–∞—Ä—à—Ä—É—Ç (–æ—Ç–∫—É–¥–∞-–∫—É–¥–∞)",
            "date": "–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç",
            "time": "–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç",
            "price": —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç,
            "passengers": —á–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç,
            "luggage": "–æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞–∂–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç",
            "vehicle_type": "—Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç/–º–∏–Ω–∏–≤—ç–Ω/–≥—Ä—É–∑–æ–≤–æ–π) –∏–ª–∏ null",
            "additional_services": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ null",
            "status": "—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (active/closed) –∏–ª–∏ null",
            "contact": "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ null",
            "is_valid": true/false (—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–º –∑–∞–∫–∞–∑–æ–º —Ç–∞–∫—Å–∏)
        }}
        
        –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏, —É—Å—Ç–∞–Ω–æ–≤–∏ is_valid: false.
        –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.1,
            "max_tokens": 1000
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.api_url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result['choices'][0]['message']['content']
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        try:
                            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                            start = content.find('{')
                            end = content.rfind('}') + 1
                            if start != -1 and end != 0:
                                json_str = content[start:end]
                                parsed_data = json.loads(json_str)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                                parsed_data['processed_at'] = datetime.now().isoformat()
                                parsed_data['source_message'] = message_text
                                
                                return parsed_data
                            else:
                                return None
                        except json.JSONDecodeError:
                            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {content}")
                            return None
                    else:
                        print(f"–û—à–∏–±–∫–∞ API: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ AI: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_processor():
    processor = DeepSeekProcessor()
    
    test_messages = [
        "–°–µ–≥–æ–¥–Ω—è 30.07 –≤ 19:00\n–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫-–ß–µ–ª—è–±–∏–Ω—Å–∫\n3 —á–µ–ª–æ–≤–µ–∫–∞+—Ä—É—á–Ω–∞—è –∫–ª–∞–¥—å\n8000 –Ω–∞ —Ä—É–∫–∏",
        "–î–∞—Ç–∞: 01.08.2025\n11:40\nüö© –ê: –≥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —Ç–µ—Ä –ü—É–ª–∫–æ–≤–æ-1\nüèÅ –ë: –ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª, –ö—Ä–µ—Å—Ç–µ—Ü–∫–∏–π —Ä-–Ω\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 7560‚ÇΩ\n–ü–∞—Å—Å–∞–∂–∏—Ä—ã: 4\n–ë–∞–≥–∞–∂: –î–∞"
    ]
    
    for msg in test_messages:
        print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {msg}")
        result = await processor.process_taxi_message(msg)
        if result:
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    asyncio.run(test_processor()) 