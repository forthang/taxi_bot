import asyncio
import hashlib
import json
import logging

import requests
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.util import await_only
from yookassa import Configuration, Payment
import uuid

import config

Configuration.account_id = config.account_id
Configuration.secret_key = config.secret_key

import database
import kb

call_handler = Router()


class AdminFSM(StatesGroup):
    add_admin = State()
    waiting_for_phone = State()



#------------–ü–æ–¥–ø–∏—Å–∫–∞. –í—ã–±–æ—Ä –∏ –æ–ø–ª–∞—Ç–∞--------------------------

# –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" | "select_product"
@call_handler.callback_query(F.data == "select_product")
async def select_product(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    try:
        # m = await bot.send_message(chat_id=user_id,
        #                        text="üîß –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ! üîß \n"
        #                             "–ú—ã –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –∏–º –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
        #                             "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–∞–º –∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º! üòä",
        #                            reply_markup=kb.start_buttons())
        m = await bot.send_message(chat_id=user_id,
                                   text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
                                   reply_markup=kb.select_product())
        await bot.delete_message(chat_id=user_id,
                                 message_id=m.message_id - 1)
    except Exception as e:
        print(e)


#  –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ | back_start_buttons
@call_handler.callback_query(F.data == "back_start_buttons")
async def select_product(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    try:
        m = await bot.send_message(chat_id=user_id,
                                   text="üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   reply_markup=kb.start_buttons())
        await bot.delete_message(user_id, m.message_id - 1)
    except Exception as e:
        print(e)

#  –ö–Ω–æ–ø–∫–∞ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º | test_product
@call_handler.callback_query(F.data == "test_product")
async def select_product(callback: CallbackQuery, bot: Bot):
    user_id = str(callback.from_user.id)
    print("test_product")
    try:
        end_date_test = database.get_test_product(user_id)
        if end_date_test: # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç—É. –¢–æ –µ—Å—Ç—å –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª–∏ —Ç–µ—Å—Ç
            m = await bot.send_message(chat_id=user_id,
                                       text=f"–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ: {end_date_test}\n"
                                            f"–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",
                                       reply_markup=kb.url_pay_chats())
            await bot.delete_message(user_id, m.message_id - 1)
        else:
            m = await bot.send_message(chat_id=user_id,
                                       text=f"–í—ã —É–∂–µ –±—Ä–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥\n"
                                            f"{database.date_product(user_id)}",
                                       reply_markup=kb.start_buttons())
            await bot.delete_message(user_id, m.message_id - 1)
    except Exception as e:
        print(e)


# VIP | vip_product
@call_handler.callback_query(F.data == "vip_product")
async def vip_product(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = str(callback.from_user.id)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await state.set_state(AdminFSM.waiting_for_phone)
    m = await bot.send_message(chat_id=user_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    try:
        await bot.delete_message(chat_id=user_id, message_id=m.message_id - 1)
    except:
        pass
@call_handler.message(lambda message: message.contact, AdminFSM.waiting_for_phone)
async def process_phone(message: types.Message, bot: Bot,  state: FSMContext):
    user_id = str(message.from_user.id)
    phone_number = message.contact.phone_number
    user_name = message.from_user.username
    first_name = message.from_user.first_name
    await state.clear()
    await state.update_data(phone_number=phone_number)
    try:
        #------T-bank------
        pay = await send_pay_t_bank(user_id, phone_number) # True, payment_url, payment_id
        print(pay)
        if pay[0]:
            await state.update_data(id_pay=pay[2])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–µ–π—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–ª–∞—Ç—ã
            database.write_id_pay(user_id, pay[2])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–ª–∞—Ç—ã

            m = await bot.send_message(chat_id=user_id,
                                       text="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ 499 —Ä—É–±–ª–µ–π –∑–∞ 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã.\n"
                                            "–û–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç\n"
                                            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´<b>–Ø –æ–ø–ª–∞—Ç–∏–ª</b>¬ª\n",
                                       reply_markup=kb.vip_product_pay(pay[1]))
            await bot.delete_message(user_id, m.message_id - 1)
            await bot.delete_message(user_id, m.message_id - 2)
            # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ–ø–ª–∞—Ç—ã –Ω–∞ True
            await state.update_data(status_pay=True)


            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
            await asyncio.gather(cheks_pay(user_id, bot, user_name, first_name, phone_number))
        else:
            m = await bot.send_message(chat_id=user_id,
                                       text=pay[1],
                                       reply_markup=kb.select_product())
            await bot.delete_message(user_id, m.message_id - 1)
    except Exception as e:
        print(e)

# async def star_chedule(user_id):
#     scheduler = AsyncIOScheduler()
#     scheduler.add_job(cheks_pay(user_id), 'interval', seconds=30)

#-----T-Bank----URL---pay_id---–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã----
@call_handler.callback_query(F.data == "get_pay")
async def vip_product_pay(callback: CallbackQuery, bot: Bot, state: FSMContext):
    id_pay = (await state.get_data()).get("id_pay")
    user_id = str(callback.from_user.id)
    user_name = callback.from_user.username
    first_name = callback.from_user.first_name
    phone_number = (await state.get_data()).get("phone_number")
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    res_pay = await get_payment_status(id_pay)
    try:
        if res_pay.get("Success"):
            # –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ–ø–ª–∞—Ç—ã
            text = ""
            ids_pay = database.get_id_pay(user_id).split(" ")
            for id_pay in ids_pay:
                text += f"\n<code>{id_pay}</code>"
            if "CONFIRMED" in res_pay.get("Status"):
                date_vip_product = database.vip_product(user_id) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º + 31 –¥–µ–Ω—å —é–∑–µ—Ä—É
                m = await bot.send_message(chat_id=user_id,
                                       text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n"
                                            "–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É VIP\n"
                                            f"–í–∞—à –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {date_vip_product}\n\n"
                                            "–í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n\n"
                                            "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤—Å—Ç—É–ø–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ /support –º—ã –≤–∞—Å –¥–æ–±–∞–≤–∏–º",
                                       reply_markup=kb.url_pay_chats())
                # –£–¥–∞–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–ª–∞—Ç–µ–∂–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≥—Ä—É–ø–ø—É

                database.del_ids_pay(user_id) # –£–¥–∞–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–ª–∞—Ç–µ–∂–µ–π
                data_text = (f"-----–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞----\n"
                             f"–ü–æ–¥–ø–∏—Å–∫–∞: VIP\n"
                             f"UserName: @{user_name}\n"
                             f"–ò–º—è: {first_name}\n"
                             f"id: {user_id}\n"
                             f"tel: {phone_number}\n"
                             f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {res_pay.get("Status")}\n"
                             f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä(—ã) –æ–ø–ª–∞—Ç—ã: {text}")
                await bot.send_message(chat_id="-1002207784658",
                                       text=data_text)
                try:
                    await bot.delete_message(user_id, m.message_id -1)
                except Exception as e:
                    logging.exception(e)
            else:
               m =  await bot.send_message(chat_id=user_id,
                                       text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ. "
                                            "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
                                       )
               data_text = (f"---–ù–∞–∂–∞—Ç–∏–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'---\n"
                            f"–ü–æ–¥–ø–∏—Å–∫–∞: VIP\n"
                            f"UserName: @{user_name}\n"
                            f"–ò–º—è: {first_name}\n"
                            f"id: <code>{user_id}</code>\n"
                            f"tel: {phone_number}\n"
                            f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {res_pay.get("Status")}\n"
                            f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä(—ã) –æ–ø–ª–∞—Ç—ã: {text}")
               await bot.send_message(chat_id="-1002207784658",
                                      text=data_text)

               await bot.delete_message(user_id, m.message_id - 1)
    except Exception as e:
        logging.exception(e)


#-------–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≠–∫–≤–∞–π—Ä–∏–Ω–≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ-----------
async def send_pay_t_bank(user_id, phone):
    try:
        TINKOFF_INIT_URL = "https://securepay.tinkoff.ru/v2/Init"
        idempotence_key = str(uuid.uuid4()).replace("-", "")[20:]


        data = {"TerminalKey": config.terminal_key,
                "Amount": int(config.vip) * 100,
                "OrderId": f"{user_id}-n{idempotence_key}",
                "Password":config.terminal_password
        }
        #  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        sorted_data = dict(sorted(data.items()))
        concatenated_string = ''.join(str(value) for value in sorted_data.values())
        hashed_string = hashlib.sha256(concatenated_string.encode()).hexdigest()
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫ | Receipt
        Receipt = {
            "Phone": phone,  # –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
            "Taxation": "patent",
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞(—Ç–æ–≤–∞—Ä–∞)
            "Items": [{  # –ü—Ä–µ–¥–º–µ—Ç—ã(–¢–æ–≤–∞—Ä—ã), –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.
                "Name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º @TransferGPT_bot",
                "Price": int(config.vip) * 100,
                "Quantity": 1,
                "Amount": int(config.vip) * 100,
                "Tax": "vat0"
            }]
        }
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ data
        data["Receipt"] = Receipt

        data["Token"] = hashed_string
        del data["Password"]

        post_data_json = json.dumps(data, ensure_ascii=False)

        headers = {
            "Content-Type": "application/json"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –≤ Tinkoff
        response = requests.post(TINKOFF_INIT_URL, data=post_data_json, headers=headers)
        print(response.json())
        if response.status_code != 200:
            return False, "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        try:
            output_array = response.json()
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if output_array.get("Success"):
            payment_url = output_array.get("PaymentURL") # –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_id = output_array.get("PaymentId")  # –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
            return True, payment_url, payment_id
        else:
            return [False, "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."]
    except Exception as e:
        print(e)

#---–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã----
async def get_payment_status(order_id):
    TINKOFF_GET_STATE_URL = "https://securepay.tinkoff.ru/v2/GetState"
    data = {
        "TerminalKey": config.terminal_key,
        "Password": config.terminal_password,
        "PaymentId": order_id,
    }
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Token
    sorted_data = dict(sorted(data.items()))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏
    concatenated_string = ''.join(str(value) for value in sorted_data.values())  # –°–∫–ª–µ–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    data["Token"] = hashlib.sha256(concatenated_string.encode()).hexdigest()  # SHA256-—Ö–µ—à
    del data["Password"]  # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(TINKOFF_GET_STATE_URL, json=data)
        output = response.json()
        return output
    except Exception as e:
        print(e)

#--------------–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ | –ü—Ä–∏–µ–º –æ–ø–ª–∞—Ç—ã
# Premium | premium_product
@call_handler.callback_query(F.data == "premium_product")
async def select_product(callback: CallbackQuery, bot: Bot):
    await callback.answer("üõ† –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç")
    user_id = str(callback.from_user.id)



#  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
async def cheks_pay(user_id, bot, user_name, first_name, phone_number):
    await asyncio.sleep(600)
    ids_pay = database.get_id_pay(user_id).split(" ")
    if ids_pay:
        for order_id in ids_pay:
            TINKOFF_GET_STATE_URL = "https://securepay.tinkoff.ru/v2/GetState"
            data = {
                "TerminalKey": config.terminal_key,
                "Password": config.terminal_password,
                "PaymentId": order_id,
            }
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Token
            sorted_data = dict(sorted(data.items()))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏
            concatenated_string = ''.join(str(value) for value in sorted_data.values())  # –°–∫–ª–µ–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            data["Token"] = hashlib.sha256(concatenated_string.encode()).hexdigest()  # SHA256-—Ö–µ—à
            del data["Password"]  # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = requests.post(TINKOFF_GET_STATE_URL, json=data)
                output = response.json()
                if output.get("Success"):
                    if "CONFIRMED" in output.get("Status"):

                        # –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ–ø–ª–∞—Ç—ã
                        text = ""
                        ids_pay = database.get_id_pay(user_id).split(" ")
                        for id_pay in ids_pay:
                            text += f"\n<code>{id_pay}</code>"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω—É
                        data_text = (f"-----–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞----\n"
                                     f"–ü–æ–¥–ø–∏—Å–∫–∞: VIP\n"
                                     f"UserName: @{user_name}\n"
                                     f"–ò–º—è: {first_name}\n"
                                     f"id: {user_id}\n"
                                     f"tel: {phone_number}\n"
                                     f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä(—ã) –æ–ø–ª–∞—Ç—ã: {text}")
                        await bot.send_message(chat_id="-1002207784658",
                                               text=data_text)
                        # –£–¥–∞–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–ø–ª–∞—Ç—ã
                        database.del_ids_pay(user_id)

                        date_vip_product = database.vip_product(user_id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º + 31 –¥–µ–Ω—å —é–∑–µ—Ä—É
                        m = await bot.send_message(chat_id=user_id,
                                                   text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n"
                                                        "–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É VIP\n"
                                                        f"–í–∞—à –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {date_vip_product}\n\n"
                                                        "–í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n\n"
                                                        "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤—Å—Ç—É–ø–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ /support –º—ã –≤–∞—Å –¥–æ–±–∞–≤–∏–º",
                                                   reply_markup=kb.url_pay_chats())
                        return output
                    else:
                        print(output)
            except Exception as e:
                print(e)


