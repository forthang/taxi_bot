import asyncio
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScope, BotCommandScopeDefault, \
    BotCommandScopeChatMember, BotCommandScopeAllPrivateChats, BotCommandScopeChat, \
    BotCommandScopeAllChatAdministrators, InlineKeyboardButton, InlineKeyboardMarkup, ChatMemberUpdated, FSInputFile
from aiogram.filters import Command, CommandStart, ChatMemberUpdatedFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from oauth2client.service_account import ServiceAccountCredentials
import gspread
import city_config

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
json_key = "search-new-keys.json"
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive", "https://www.googleapis.com/auth/spreadsheets"]
credentials = ServiceAccountCredentials.from_json_keyfile_name(json_key, scope)
client = gspread.authorize(credentials)
base_group = "https://docs.google.com/spreadsheets/d/1ykAT1IyngkqoD-MPc69SWU9J9_Gfb3xLr9v-ZmOVa_8/edit?usp=sharing"
filters = "https://docs.google.com/spreadsheets/d/1BhIRhT9cGBILyyqUHfQvho94B_kOMCgrSr6dTtQV67M/edit?usp=sharing"



import database
import kb
import config


class AdminFSM(StatesGroup):
    myadmin = State()
    vip_one = State()
    list_group = State()
    update_fag = State()

admin = Router()

# @admin.message(Command("reset_bd"))
# async def reset_bd(message: Message, bot: Bot):
#     res = database.null_date_product()
#     if res:
#         await bot.send_message(chat_id=message.from_user.id, text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ!")

@admin.message(Command("myadmin"))
async def test(message: Message, state: FSMContext, bot: Bot):
    user_id = str(message.from_user.id)
    if user_id in config.admins:
        await bot.send_message(chat_id=user_id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                               reply_markup=kb.admin_buttons()
                               )
        await state.set_state(AdminFSM.myadmin)

@admin.message(Command("developer"))
async def developer(message: Message, bot: Bot):
    user_id = str(message.from_user.id)
    await bot.send_message(chat_id=user_id,
                           text=f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @MansurTGram")

@admin.callback_query(F.data == "backup")
async def backup(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id
    bd = FSInputFile(path="database.db")
    await bot.send_document(chat_id=user_id,
                            document=bd)

# –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
@admin.callback_query(F.data == "filters")
async def filters(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    await bot.send_message(chat_id=user_id, text="–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã...")
    res = await update_filters()
    if res:
        await bot.send_message(chat_id=user_id, text=f"–û—à–∏–±–∫–∞: {str(res)}")
    else:
        await bot.send_message(chat_id=user_id, text=f"–§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

async def update_filters():
    try:
        filters = "https://docs.google.com/spreadsheets/d/1BhIRhT9cGBILyyqUHfQvho94B_kOMCgrSr6dTtQV67M/edit?usp=sharing"
        worksheet = client.open_by_url(filters)
        spreadsheet = worksheet.get_worksheet(0)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ blacklist
        res = spreadsheet.col_values(1)
        city_config.blacklist[:] = res  # blacklist
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ central
        res = spreadsheet.col_values(2)
        city_config.districts["central"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –õ–î–ù–†
        res = spreadsheet.col_values(3)
        city_config.districts["–õ–î–ù–†"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zap-her
        res = spreadsheet.col_values(4)
        city_config.districts["zap_her"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sev_zapad
        res = spreadsheet.col_values(5)
        city_config.districts["sev_zapad"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ yug
        res = spreadsheet.col_values(6)
        city_config.districts["yug"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sev_kav
        res = spreadsheet.col_values(7)
        city_config.districts["sev_kav"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ privolz
        res = spreadsheet.col_values(8)
        city_config.districts["privolz"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ural
        res = spreadsheet.col_values(9)
        city_config.districts["ural"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sibir
        res = spreadsheet.col_values(10)
        city_config.districts["sibir"][:] = res
        #  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ dalnevostok
        res = spreadsheet.col_values(11)
        city_config.districts["dalnevostok"][:] = res
        return False
    except Exception as e:
        return e





# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
@admin.callback_query(F.data == "update_fag")
async def update_fag(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    await bot.send_message(chat_id=user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ  —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞\n\n"
                                                 "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ. "
                                                 "–ù–æ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ")
    await state.set_state(AdminFSM.update_fag)

@admin.message(AdminFSM.update_fag)
async def update_fag(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    text = message.html_text
    with open("update_fag.txt", "w") as f:
        f.write(text)
    await bot.send_message(chat_id=user_id, text="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    with open("update_fag.txt", "r") as f:
        fag = f.read()
    await bot.send_message(chat_id=user_id, text=fag,
                           reply_markup=kb.admin_buttons())



@admin.callback_query(F.data == "logs")
async def logs(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id
    bd = FSInputFile(path="logs.txt")
    await bot.send_document(chat_id=user_id,
                            document=bd)

@admin.callback_query(F.data == "stata")
async def state(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id
    users = database.all_state()
    await bot.send_message(chat_id=user_id,
                           text=f"–í—Å–µ–≥–æ –∑–∞–ø—É—Å—Ç–∏–≤—à–∏—Ö –±–æ—Ç–∞: <b>{users[0]}</b>\n"
                                f"–í—Å–µ–≥–æ —Å –¢–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{users[3]}</b>\n"
                                f"–í—Å–µ–≥–æ —Å VIP –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{users[1]}</b>\n"
                                f"–í—Å–µ–≥–æ —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{users[2]}</b>\n")


#  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
@admin.callback_query(F.data == "list_group")
async def list_group(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    await bot.send_message(chat_id=user_id,
                           text="–ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã...")
    list_group = ""
    res = client.open_by_url(base_group).sheet1
    for i in res.get():
        if not "–°—Å—ã–ª–∫–∞" in i[1]:
            print(i)
            list_group += f"<a href='{i[1]}'>{i[0]}</a>\n"
    with open("list_group.txt", "w") as f:
        f.write(list_group)
    await asyncio.sleep(3)
    await bot.send_message(chat_id=user_id,
                           text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
    await asyncio.sleep(3)
    with open("list_group.txt", "r") as f:
        groups = f.read()
        await bot.send_message(chat_id=user_id,
                               text=groups, disable_web_page_preview=True)





@admin.callback_query(AdminFSM.myadmin)
async def myadmin(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = str(callback.from_user.id)
    date = callback.data
    await state.update_data(date=date)
    if date == "extend_one":
        await callback.answer()
        await bot.send_message(chat_id=user_id,
                               text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ VIP –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ username –∏ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
                                    "–ü—Ä–∏–º–µ—Ä: @username 10"
                               )
    elif date == "extend_premium_one":
        await callback.answer("üõ† –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        # await bot.send_message(chat_id=user_id,
        #                        text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ PREMIUM –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        #                             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ username –∏ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
        #                             "–ü—Ä–∏–º–µ—Ä: @username 10")

    elif date == "extend_all":
        await callback.answer("")
        await bot.send_message(chat_id=user_id,
                               text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ VIP –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∞ "
                                    "VIP –ø–æ–¥–ø–∏—Å–∫–∞\n"
                                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è\n"
                                    "–ü—Ä–∏–º–µ—Ä: 10")


    elif date == "extend_premium_all":
        await callback.answer("üõ† –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        # await bot.send_message(chat_id=user_id,
        #                        text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ PREMIUM –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        #                             "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –≤—Å–µ–º —é–∑–µ—Ä–∞–º\n"
        #                             "–ü—Ä–∏–º–µ—Ä: 10")
    elif date == "test_period":
        await callback.answer()
        await bot.send_message(chat_id=user_id,
                               text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¢–ï–°–¢–û–í–û–ì–û –ü–ï–†–ò–û–î–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É "
                                    "–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∏ –Ω–µ –±—ã–ª–æ VIP –∏–ª–∏ PREMIUM –ø–æ–¥–ø–∏—Å–∫–∏\n"
                                    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –ø–æ–∫—É–ø–∞–ª –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –Ω–µ–≥–æ VIP –ø—Ä–æ–¥–ª–µ–Ω–∏–µ\n\n"
                                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¢–ï–°–¢–û–í–´–ô –ü–ï–†–ò–û–î\n"       
                                    "–ü—Ä–∏–º–µ—Ä: 10")
    elif date ==  "mailing":
        await callback.answer()
        await bot.send_message(chat_id=user_id,
                               text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n"
                                    "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ. –ù–æ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ")

    elif date == "mailing_vip":
        await callback.answer()
        await bot.send_message(chat_id=user_id,
                               text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n"
                                    "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ. –ù–æ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ")


@admin.message(AdminFSM.myadmin)
async def extend(message: Message, state: FSMContext, bot: Bot):
    user_id = str(message.from_user.id)
    try:
        text = message.text.split(" ")
        date = (await state.get_data()).get("date")
        if date == "extend_one":
            user_name = str(text[0].strip().replace("@", "").replace("https://t.me/", ""))
            date_end = int(text[1].strip())
            print(user_name, date_end)
            res = database.vip_one(str(user_name), date_end)
            await bot.send_message(chat_id=user_id,
                                   text=f"–ü—Ä–æ–¥–ª–µ–Ω–æ –¥–æ: {res}",
                                   reply_markup=kb.admin_buttons())
        elif date == "extend_all":
            time = message.text.strip().replace(".", "")
            try:
                database.vip_all_date(int(time))
                await bot.send_message(chat_id=user_id,
                                           text=f"–í—ã –ø—Ä–æ–¥–ª–∏–ª–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º(–£ –∫–æ–≥–æ –±—ã–ª VIP) VIP –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: "
                                                f"<b>{time}</b>",
                                           reply_markup=kb.admin_buttons())
            except Exception as e:
                await bot.send_message(chat_id=user_id,
                                       text=f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏")

        elif date == "test_period":
            time = message.text.strip().replace(".", "")
            try:
                res = database.test_all_date(int(time))
                if res:
                    await bot.send_message(chat_id=user_id,
                                           text=f"–í—ã –ø—Ä–æ–¥–ª–∏–ª–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¢–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: "
                                                f"<b>{time}</b>",
                                           reply_markup=kb.admin_buttons())
            except Exception as e:
                await bot.send_message(chat_id=user_id,
                                       text=f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏")

        elif date == "mailing":
            text_mailing = message.html_text
            try:
                m = await bot.send_message(chat_id=user_id,
                                       text="–ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 10 —Å–µ–∫—É–Ω–¥")

                users = database.all_get_users()
                for user in users:
                    try:
                       await bot.send_message(chat_id=user.user_id,
                                              text=text_mailing)
                       print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except:
                        database.del_user(user.user_id)
                        print("–Æ–∑–µ—Ä —É–¥–∞–ª–µ–Ω")
                    await asyncio.sleep(10)

                await bot.send_message(chat_id=user_id,
                                       text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                await bot.send_message(chat_id=user_id,
                                       text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


        elif date == "mailing_vip":
            text_mailing = message.html_text
            try:
                m = await bot.send_message(chat_id=user_id,
                                       text="–ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 10 —Å–µ–∫—É–Ω–¥")
                users = database.all_get_users()
                for user in users:

                    if user.type_product == "VIP":
                        try:
                           await bot.send_message(chat_id=user.user_id,
                                                  text=text_mailing)
                           print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        except Exception as e:
                            database.del_user(user.user_id)
                            print("–Æ–∑–µ—Ä —É–¥–∞–ª–µ–Ω\n"
                                  f"{e}")
                        await asyncio.sleep(10)




                await bot.send_message(chat_id=user_id,
                                       text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                await bot.send_message(chat_id=user_id,
                                       text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    except Exception as e:
        print(e)





