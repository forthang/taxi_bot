import asyncio
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ChatType
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScope, BotCommandScopeDefault, \
    BotCommandScopeChatMember, BotCommandScopeAllPrivateChats, BotCommandScopeChat, \
    BotCommandScopeAllChatAdministrators, InlineKeyboardButton, InlineKeyboardMarkup, ChatMemberUpdated, FSInputFile
from aiogram.filters import Command, CommandStart, ChatMemberUpdatedFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.event import Events
from aiogram.types import ChatJoinRequest


import config
import database
import handlers_my_product
import kb
import handlers_pay
from my_admin import admin

REDIS_DSN = "redis://127.0.0.1:6379"
storage = RedisStorage.from_url(REDIS_DSN, key_builder=DefaultKeyBuilder(with_bot_id=True))

TOKEN = config.token  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
m_admin = ""  # –ê–¥–º–∏–Ω—ã
forum = -1002399917728
forum_url = "https://t.me/c/2399917728"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ /3 —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–º—É
forum_url_link = "https://t.me/+UshQe-gf0V04OTFi"

default = DefaultBotProperties(parse_mode="HTML")
bot = Bot(token=TOKEN, default=default)
dp = Dispatcher(storage=storage)
dp.include_routers(handlers_pay.call_handler, handlers_my_product.my_product_handler, admin)


#  –ù–∞ –∫–æ–º–∞–Ω–¥—É start
@dp.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        await set_commands()
        user_id = str(message.from_user.id)
        user_name = message.from_user.username
        print(f"{user_id} : {message.from_user.first_name} : @{message.from_user.username}")
        m = await message.answer(text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!")
        await message.answer(text="üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=kb.start_buttons())
        database.write_user(user_id, user_name)
        await bot.delete_message(user_id, m.message_id - 1)
    except Exception as e:
        print(e)



@dp.message(Command("support"), F.chat.type == ChatType.PRIVATE)
async def stop_notif(message: Message):
    user_id = str(message.from_user.id)

    await bot.send_message(user_id, text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ —á–∞—Ç: <a href='https://t.me/+JJtf6d9WsGFkMjEy'>–û–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –æ–±—â–µ–Ω–∏–µ</a>")


@dp.message(Command("stop"), F.chat.type == ChatType.PRIVATE)
async def stop_notif(message: Message):
    user_id = str(message.from_user.id)
    try:
        database.add_notif(user_id, "stop")
        m = await bot.send_message(user_id, text="üîï –û–ø–æ–≤–µ—à–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(e)



async def set_commands():
    commands = [
        BotCommand(
            command='start',
            description='‚ôªÔ∏è  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é | –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞'
        ),
        BotCommand(
            command='stop',
            description='–°–±—Ä–æ—Å–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'
        ),
        BotCommand(
            command='support',
            description='–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º'
        ),

    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


# –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏
@dp.chat_join_request()
async def handle_join(event: ChatJoinRequest):
    user = event.from_user
    await bot.approve_chat_join_request(chat_id=event.chat.id, user_id=user.id)
    date = database.date_product_end(str(user.id))
    if date:
        await bot.send_message(chat_id=user.id,
                               text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–¥–æ–±—Ä–µ–Ω–∞\n"
                                    "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã!. üöÄ")


    # await bot.ban_chat_member(chat_id=-1001246648784, user_id=user.id)
    # await bot.unban_chat_member(chat_id=-1001246648784, user_id=user.id)  # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω–∞

    # #  –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∞
    # date = database.date_product_end(str(user.id))
    # if date:
    #     await bot.approve_chat_join_request(chat_id=event.chat.id, user_id=user.id)


# –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
GROUP_ID = forum
@dp.chat_member(F.new_chat_member.status == "member")  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
async def user_joined(event: ChatMemberUpdated):
    user = event.new_chat_member.user
    chat = event.chat
    #  –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –µ–≥–æ –∏–∑ —á–∞—Ç–∞
    date = database.date_product_end(str(user.id))
    await asyncio.sleep(3)
    if not date:
        print("–í—ã–∫–∏–¥—ã–≤–∞–µ–º —é–∑–µ—Ä–∞ –∏–∑ –≥—Ä—É–ø–ø—ã")
        await bot.ban_chat_member(chat_id=chat.id, user_id=user.id)
        await bot.unban_chat_member(chat_id=chat.id, user_id=user.id)  # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω–∞
    else:
        print("–£ —é–∑–µ—Ä–∞ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —á–∞—Ç–µ")



async def start_all_test_user():
    users = database.all_get_users()
    try:
        bd = FSInputFile(path="database.db")
        await bot.send_document(chat_id=config.admins[1],
                                document=bd)

        bd = FSInputFile(path="database.db")
        await bot.send_document(chat_id=config.admins[0],
                                document=bd)
    except Exception as e:
        print(e)
    try:
        for user in users:
            date = database.date_product_end(str(user.user_id))
            if not date:
                try:
                    await asyncio.sleep(5)
                    await bot.ban_chat_member(chat_id=forum, user_id=user.user_id)
                    await bot.unban_chat_member(chat_id=forum, user_id=user.user_id)  # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω–∞
                    print(f"–£ {user.user_name} –∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞, –æ–Ω –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                except Exception as e:
                    print(e)
            else:
                print(f"–£ {user.user_name} –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞")
    except Exception as e:
        print(e)

scheduler = AsyncIOScheduler()
scheduler.add_job(start_all_test_user, 'interval', seconds=86400)




async def ai_bot(): # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ aiogram
    print("Aiogram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot, allowed_updates=[
        "message",
        "inline_query",
        "chat_member",
        "my_chat_member",
        "callback_query",
        "chat_join_request",
    ])

